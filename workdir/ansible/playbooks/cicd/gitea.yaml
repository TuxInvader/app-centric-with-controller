---
- hosts: cicd
  become: yes
  vars_files:
    - ~/ansible/vars/cicd.yaml
  vars:
    gitea_version: "1.10.2"
    gitea_user: gitea
    gitea_home: /home/gitea
    gitea_workdir: /var/lib/gitea
    gitea_hostname: "{{ cicd.git.hostname }}"

  tasks:

    - name: Check for Gitea install, version {{ gitea_version }}
      stat:
        path: "/usr/local/bin/gitea-{{ gitea_version }}"
      register: gitea_binary

    - name: Check for Gitea configuration /etc/gitea/app.ini
      stat:
        path: "/etc/gitea/app.ini"
      register: gitea_config

    - name: Download gitea from the interwebs
      get_url:
        url: "https://dl.gitea.io/gitea/{{ gitea_version }}/gitea-{{ gitea_version }}-linux-amd64"
        dest: "/usr/local/bin/gitea-{{ gitea_version }}"
        mode: 0755
      when: gitea_binary.stat.exists == False

    - name: Create /usr/local/bin/gitea symlink
      file:
        force: yes
        path: "/usr/local/bin/gitea"
        src: "/usr/local/bin/gitea-{{ gitea_version }}"
        state: link

    - name: Create the gitea user
      user:
        name: "{{gitea_user}}"
        create_home: yes
        home: "{{gitea_home}}"
        password_lock: yes
        shell: /bin/bash
        state: present

    - name: Create the working directory and /etc/gitea
      file:
        state: directory
        path: "{{ item }}"
        owner: "{{gitea_user}}"
        group: "{{gitea_user}}"
        mode: 0750
      with_items:
        - "{{gitea_workdir}}"
        - "{{gitea_workdir}}/custom"
        - "{{gitea_workdir}}/data"
        - "{{gitea_workdir}}/log"
        - "/etc/gitea"

    - name: Generate the gitea INTERNAL TOKEN 
      command: "gitea generate secret INTERNAL_TOKEN"
      register: "gitea_secret_token"
      when: gitea_config.stat.exists == False

    - name: Generate the gitea JWT SECRET 
      command: "gitea generate secret JWT_SECRET"
      register: "gitea_secret_jwt"
      when: gitea_config.stat.exists == False

    - name: Generate the gitea LFS SECRET 
      command: "gitea generate secret JWT_SECRET"
      register: "gitea_secret_lfs"
      when: gitea_config.stat.exists == False

    - name: Generate the gitea SECRET KEY 
      command: "gitea generate secret SECRET_KEY"
      register: "gitea_secret_key"
      when: gitea_config.stat.exists == False

    - name: Create the mysql database
      command:
        cmd: "mysql -e 'create database gitea'"
        creates: /var/lib/mysql/gitea/

    - name: Setup gitea mysql user
      command: mysql -e "grant all on gitea.* to gitea@'localhost' identified by 'nginx101'" mysql

    - name: Setup gitea mysql user
      command: mysql -e "flush privileges"

    - name: Create the Gitea app.ini configuration file
      template:
        dest: /etc/gitea/app.ini
        src: files/gitea_app_ini.j2
        owner: root
        group: gitea
        mode: 0640
      when: gitea_config.stat.exists == False

    - name: Create the systemd service file
      copy:
        src: files/gitea.service
        dest: /etc/systemd/system/gitea.service

    - name: Enable and start the Gitea service
      service:
        name: gitea.service
        enabled: true
        state: started

    - name: Waiting for gitea to finish initializing
      wait_for:
        port: 3000
        sleep: 2
        timeout: 120

    - name: Check for nginx admin user
      command:
        argv:
          - "mysql"
          - "-Ns"
          - "-e"
          - 'select count(*) from user where lower_name = "nginx"'
          - "gitea"
      register: gitea_nginx_user_count

    - name: Check for nginx admin user
      set_fact:
        gitea_nginx_user_count = "{{gitea_nginx_user_count.stdout}}"

    - name: Create the admin user for Gitea
      become_user: "{{gitea_user}}"
      command: 
        cmd: "gitea -c /etc/gitea/app.ini admin create-user --username {{ cicd.git.admin_username }} \
             --password {{ cicd.git.admin_password }} --email someone@nginx.com --admin"
      when: gitea_nginx_user_count.stdout == "0"

    - block:

      - name: Deploy the git repositories backup
        become_user: "{{gitea_user}}"
        unarchive:
          dest: "{{gitea_home}}"
          owner: "{{gitea_user}}"
          group: "{{gitea_user}}"
          src: files/gitea-repos.tgz

      - name: Inject the SQL for repositories backup
        copy:
          src: files/gitea-repos.sql
          dest: "{{gitea_home}}/gitea-repos.sql"

      - name: Inject the SQL for repositories backup
        shell:
          cmd: "mysql gitea < {{gitea_home}}/gitea-repos.sql"

      when: cicd.git.deploy_repos == true

