---

# OAS 3 Specifications. the spec should be set to spec.<filename> without the yaml extension
# Ansible will load the specification from {{specs_dir/<name>.yaml}}
oas3:
  f1_api:
    config:
      metadata:
        name: v1
        displayName: Ergast F1 API
      desiredState:
        specs:
          REST: "{{ specs.ergast | default({}) }}"

# Identity Providers...
idps:
  f1_keys:
    config:
      metadata:
        name: f1_keys
        displayName: F1 API Keys
      desiredState:
        identityProvider:
          type: API_KEY
  my_jwt_remote:
    config:
      metadata:
        name: my_jwt_remote
        displayName: My JWT URL
      desiredState:
        identityProvider:
          type: JWT
          jwkFile:
            cacheExpire: 12h
            type: REMOTE_FILE
            uri: https://www.googleapis.com/oauth2/v3/certs
  my_jwt_local:
    config:
      metadata:
        name: my_jwt_local
        displayName: My JWT Local
      desiredState:
        identityProvider:
          type: JWT
          jwkFile: "{{ jwks.google | default({}) }}"

# Local API keys (clients)
clients:
  f1_admins:
    parent: f1_keys
    config:
      metadata:
        name: f1_admins
        displayName: F1 Admins
      desiredState:
        credential:
          type: API_KEY
          apiKey: e849b3f640a6740683f9012b097208bc

envs:

  f1_prod:
    config:
      metadata:
        name: f1_prod
        displayName: "F1 [ Production ]"
        tags: []
      desiredState: {}

    # Certificates:
    certs:
      ergast.nginx:
        config:
          metadata:
            name: ergast.nginx
          desiredState:
            type: PEM
            publicCert: "{{ pem.public[ 'ergast.nginx' ] | default('') }}"
            privateKey: "{{ pem.private[ 'ergast.nginx' ] | default('') }}"
            caCerts: "{{ pem.chain[ 'ergast.nginx' ] | default([]) }}"

    gateways:
      f1_gw:
        config:
          metadata:
            name: f1_gw
          desiredState:
            ingress:
              uris:
                workshop_fe_placeholder: {}
              placement:
                instanceRefs:
                  - ref: "/infrastructure/locations/unspecified/instances/nginx1"
              # Enable TLS for the API
              tls:
                certRef:
                  ref: "/services/environments/f1_prod/certs/ergast.nginx"
                protocols:
                  - TLSv1.2
                  - TLSv1.3
                preferServerCipher: ENABLED
                sessionCache: SHARED

    apps:
      f1com:
        config:
          metadata:
            name: f1com
            displayName: F1 Apps
            tags: []
          desiredState: {}

    # Published APIs - link back to OAS3 specs above
    apis:
      f1_api:
        parent: f1com
        config:
          metadata:
            name: f1_api
            displayName: F1 API
          desiredState:
            apiDefinitionVersionRef:
              ref: /services/api-definitions/f1_api/versions/v1
            gatewayRefs:
            - ref: /services/environments/f1_prod/gateways/f1_gw
            basepath: /api/f1

    components:
      blog:
        parent: f1com
        config:
          metadata:
            name: blog
            displayName: blog
            tags: []
          desiredState:
            ingress:
              gatewayRefs:
              - ref: /services/environments/f1_prod/gateways/f1_gw
              uris:
                /blog: {}
                /: {}
            backend:
              ntlmAuthentication: DISABLED
              preserveHostHeader: DISABLED
              workloadGroups:
                ergastf1:
                  loadBalancingMethod:
                    type: ROUND_ROBIN
                  uris:
                    http://unit1:
                      isBackup: false
                      isDown: false
                      isDrain: false
                      resolve: DISABLED
            programmability:
              uriRewrites:
                - incomingPattern: "^(/blog)/old$"
                  rewritePattern: "$1/new"
            logging:
              errorLog: DISABLED
              accessLog:
                state: ENABLED

      # This one is for a published API
      drivers:
        parent: f1com
        config:
          metadata:
            name: drivers
            displayName: drivers
            tags: []
          desiredState:
            publishedApiRefs:
              - ref: /services/environments/f1_prod/apps/f1com/published-apis/f1_api
            ingress:
              gatewayRefs:
              - ref: /services/environments/f1_prod/gateways/f1_gw
              uris:
                /drivers:
                  get:
                    operationId: listDrivers
                    parameters:
                    - description: How many items to return at one time (max 100)
                      in: query
                      name: limit
                      required: false
                      schema:
                        format: int32
                        type: integer
                    responses:
                      "200":
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/ResultDriverList'
                        description: A paged array of drivers
                        headers:
                          x-next:
                            description: A link to the next page of responses
                            schema:
                              type: string
                      default:
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/Error'
                        description: unexpected error
                    summary: List all drivers
                    tags:
                    - drivers
                /drivers/{driverId}:
                  get:
                    operationId: showDriverById
                    parameters:
                    - description: The id of the driver to retrieve
                      in: path
                      name: driverId
                      required: true
                      schema:
                        type: string
                    responses:
                      "200":
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/ResultDriver'
                        description: Expected response to a valid request
                      default:
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/Error'
                        description: unexpected error
                    summary: Info for a specific driver
                    tags:
                    - drivers
                /drivers/{driverId}/seasons:
                  get:
                    operationId: listDriverSeasons
                    parameters:
                    - description: The id of the driver to retrieve
                      in: path
                      name: driverId
                      required: true
                      schema:
                        type: string
                    responses:
                      "200":
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/ResultDriverSeasonList'
                        description: Expected response to a valid request
                      default:
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/Error'
                        description: unexpected error
                    summary: A paged array of seasons where driver raced
                    tags:
                    - drivers

            # Return json errors
            errorSetRef:
              ref: /services/errorsets/default-json

            # Security Section
            security:

              # API Key Authentication
              apiKeyClientAuth:
                key: psk
                keyLocation: QUERY_PARAM      # QUERY_PARAM or HEADER

              # JWT Authentication
              # jwtClientAuth:
              #   key: jwt                    # Not needed for BEARER
              #   KeyLocation: HEADER         # BEARER, HEADER, COOKIE, QUERY_PARAM

              # IDP for the Authentication process above: apiKeyClientAuth or jwtClientAuth
              identityProviderRefs:
                - ref: /security/identity-providers/f1_keys

            backend:
              ntlmAuthentication: DISABLED
              preserveHostHeader: DISABLED
              workloadGroups:
                ergastf1:
                  loadBalancingMethod:
                    type: ROUND_ROBIN
                  locationRefs:
                    - ref: /infrastructure/locations/unspecified
                  uris:
                    http://unit1:
                      isBackup: false
                      isDown: false
                      isDrain: false
                      resolve: DISABLED
              monitoring:
                defaultState: HEALTHY
                uri: /api/f1/seasons
            logging:
              errorLog: DISABLED
              accessLog:
                state: ENABLED

      # This one is for a published API
      seasons:
        parent: f1com
        config:
          metadata:
            name: seasons
            displayName: seasons
            tags: []
          desiredState:

            publishedApiRefs:
              - ref: /services/environments/f1_prod/apps/f1com/published-apis/f1_api

            ingress:
              gatewayRefs:
              - ref: /services/environments/f1_prod/gateways/f1_gw
              uris:
                /seasons:
                  get:
                    operationId: listSeasons
                    responses:
                      "200":
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/ResultSeasonList'
                        description: Expected response to a valid request
                      default:
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/Error'
                        description: unexpected error
                    summary: A paged array of seasons
                    tags:
                    - seasons
                /{seasonYear}:
                  get:
                    operationId: listRaces
                    parameters:
                    - description: The year of the season to retrieve
                      in: path
                      name: seasonYear
                      required: true
                      schema:
                        type: string
                    responses:
                      "200":
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/ResultRaceList'
                        description: Expected response to a valid request
                      default:
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/Error'
                        description: unexpected error
                    summary: A paged array of races in a season
                    tags:
                    - seasons
                /{seasonYear}{raceNumber}:
                  get:
                    operationId: getRace
                    parameters:
                    - description: The year of the season
                      in: path
                      name: seasonYear
                      required: true
                      schema:
                        type: string
                    - description: The race in that season to retrieve
                      in: path
                      name: raceNumber
                      required: true
                      schema:
                        type: string
                    responses:
                      "200":
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/ResultRace'
                        description: Expected response to a valid request
                      default:
                        content:
                          application/json:
                            schema:
                              $ref: '#/components/schemas/Error'
                        description: unexpected error
                    summary: Get details of a specific race in season/race number
                    tags:
                    - seasons

            # Security Section
            security:

              # Rate shaping definition
              rateLimits:
                season_limit:
                  key: $binary_remote_addr    # Default $binary_remote_addr, can be any NGINX variable
                  rate: 1r/s
                  burstBeforeReject: 0
                  statusCode: 429

            backend:
              ntlmAuthentication: DISABLED
              preserveHostHeader: DISABLED
              workloadGroups:
                ergastf1:
                  loadBalancingMethod:
                    type: ROUND_ROBIN
                  locationRefs:
                    - ref: /infrastructure/locations/unspecified
                  uris:
                    http://unit1:
                      isBackup: false
                      isDown: false
                      isDrain: false
                      resolve: DISABLED
              monitoring:
                defaultState: HEALTHY
                uri: /api/f1/seasons
            logging:
              errorLog: DISABLED
              accessLog:
                state: ENABLED

