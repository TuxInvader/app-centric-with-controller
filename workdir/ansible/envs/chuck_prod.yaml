---
# Actual IP Address for icndb.com
# api.incdb.com: 104.24.115.160 104.24.114.160
# incdb.com: 193.190.253.234

apis: {}

# OAS 3 Specifications. the spec should be set to spec.<filename> without the yaml extension
# Ansible will load the specification from {{specs_dir/<name>.yaml}}
oas3:
  chuck_jokeapi:
    config:
      metadata:
        name: chuck_jokeapi
        displayName: Chucks API
      desiredState:
        spec: "{{ specs.icndb | default({}) }}"

# Identity Providers...
idps:
  my_keys:
    config:
      metadata:
        name: my_keys
        displayName: My Keys
      desiredState:
        identityProvider:
          type: API_KEY
  my_jwt_remote:
    config:
      metadata:
        name: my_jwt_remote
        displayName: My JWT URL
      desiredState:
        identityProvider:
          type: JWT
          jwkFile:
            cacheExpire: 12h
            type: REMOTE_FILE
            uri: https://www.googleapis.com/oauth2/v3/certs
  my_jwt_local: 
    config:
      metadata:
        name: my_jwt_local
        displayName: My JWT Local
      desiredState:
        identityProvider:
          type: JWT
          jwkFile: "{{ jwks.google | default({}) }}"

# Local API keys (clients)
clients:
  chuck:
    parent: my_keys
    config:
      metadata:
        name: chuck
        displayName: Chuck
      desiredState:
        credential:
          type: API_KEY
          apiKey: e849b3f640a6740683f9012b097208bc

# Environments
envs:
  chuck_prod:
    config:
      metadata:
        name: chuck_prod
        displayName: "Chuck Norris [ Production ]"
        tags: []
      desiredState: {}

    # Certificates:
    certs:
      icndb.com:
        config:
          metadata:
            name: icndb.com
          desiredState:
            type: PEM
            #password: ''
            publicCert: "{{ pem.public[ 'icndb.com' ] | default('') }}"
            privateKey: "{{ pem.private[ 'icndb.com' ] | default('') }}"
            caCerts: "{{ pem.chain[ 'icndb.com' ] | default([]) }}"

    # Gateways
    gateways: 
      nginx_gw:
        config:
          metadata:
            name: nginx_gw
          desiredState:
            ingress:
              uris: 
                "http://icndb.com": {} 
                "http://www.icndb.com": {} 
              placement:
                instanceRefs:
                  - ref: "/infrastructure/locations/unspecified/instances/2"
      nginx_api:
        config:
          metadata:
            name: nginx_api
          desiredState:
            ingress:
              uris: 
                #"http://api.icndb.com": {} 
                "https://api.icndb.com": {} 
              placement:
                instanceRefs:
                  - ref: "/infrastructure/locations/unspecified/instances/4"

              # Enable TLS for the API
              tls:
                certRef:
                  ref: "/services/environments/chuck_prod/certs/icndb.com"
                protocols:
                  - TLSv1.2
                  - TLSv1.3
                preferServerCipher: ENABLED
                sessionCache: SHARED
 
    # Applications
    apps:
      website:
        config:
          metadata:
            name: website
            displayName: "Chuck WWW"
            tags: []
          desiredState: {}
      api:
        config:
          metadata:
            name: api
            displayName: "Chuck API"
            tags: []
          desiredState: {}

    # Published APIs - link back to OAS3 specs above
    apis:
      icndb:
        parent: "api"
        config:
          metadata:
            name: icndb
            displayName: ICNDB
          desiredState:
            apiDefinitionRef:
              ref: /services/api-definitions/chuck_jokeapi
            gatewayRefs:
            - ref: /services/environments/chuck_prod/gateways/nginx_api
            componentRefs:
            - ref: /services/environments/chuck_prod/apps/api/components/route_1

    # Components
    components:

      # This is an general ADC component
      blog:
        parent: "website"
        config:
          metadata:
            name: blog
            displayName: blog
            tags: []
          desiredState:
            ingress:
              gatewayRefs:
              - ref: /services/environments/chuck_prod/gateways/nginx_gw
              uris:
                /blog: {}
                /: {}
            backend:
              ntlmAuthentication: DISABLED
              preserveHostHeader: DISABLED
              workloadGroups:
                icndb.com:
                  loadBalancingMethod:
                    type: ROUND_ROBIN
                  uris:
                    http://193.190.253.234:
                      isBackup: false
                      isDown: false
                      isDrain: false
                      resolve: DISABLED
              monitoring:
                defaultState: HEALTHY
                uri: /
            logging:
              errorLog: DISABLED
              accessLog:
                state: ENABLED

      # This one is for a published API
      route_1:
        parent: "api"
        config:
          metadata:
            name: route_1
            displayName: Jokes API
            tags: []
          desiredState:
            ingress:
              gatewayRefs:
              - ref: /services/environments/chuck_prod/gateways/nginx_api
              uris:
                /jokes/random:
                  matchMethod: PREFIX
            publishedApiRefs:
              - ref: /services/environments/chuck_prod/apps/api/published-apis/icndb

            # Security Section
            security:

              # Rate shaping definition
              rateLimit:
                defaultLimit:
                  key: $binary_remote_addr    # Default $binary_remote_addr, can be any NGINX variable
                  rate: 1
                  rateMeasure: SECONDS        # SECONDS or MINUTES
                  statusCode: 429

              # API Key Authentication
              apiKeyClientAuth:
                key: psk
                keyLocation: QUERY_PARAM      # QUERY_PARAM or HEADER

              # JWT Authentication
              # jwtClientAuth:
              #   key: jwt                    # Not needed for BEARER
              #   KeyLocation: HEADER         # BEARER, HEADER, COOKIE, QUERY_PARAM

              # IDP for the Authentication process above: apiKeyClientAuth or jwtClientAuth
              identityProviderRefs:
                - ref: /security/identity-providers/my_keys

            backend:
              ntlmAuthentication: DISABLED
              preserveHostHeader: DISABLED
              workloadGroups:
                apiicndb.com:
                  loadBalancingMethod:
                    type: ROUND_ROBIN
                  locationRefs:
                    - ref: /services/infrastructure/locations/unspecified
                  uris:
                    http://104.24.115.160:
                      isBackup: false
                      isDown: false
                      isDrain: false
                      resolve: DISABLED
                    http://104.24.114.160:
                      isBackup: false
                      isDown: false
                      isDrain: false
                      resolve: DISABLED
              monitoring:
                defaultState: HEALTHY
                uri: /
            logging:
              errorLog: DISABLED
              accessLog:
                state: ENABLED

